# Generated by Django 2.0.6 on 2018-06-12 23:31

from django.db import migrations, models
import django.db.models.deletion
import enumfields.fields
import postcot_core.base_types
import postcot_core.validators.action_validator
import postcot_core.validators.domain_validator
import postcot_core.validators.postfix_identifier_validator
import postcot_core.validators.username_pattern_validator


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccessAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.TextField(help_text='Cannot edit after created.', unique=True, validators=[postcot_core.validators.action_validator.ActionValidator()])),
                ('notes', models.CharField(blank=True, help_text='Notes on the action.', max_length=256, null=True)),
            ],
            options={
                'verbose_name': 'Access Action',
                'verbose_name_plural': 'Access Actions',
            },
        ),
        migrations.CreateModel(
            name='AccessControl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_role', enumfields.fields.EnumField(enum=postcot_core.base_types.AccessControlRole, max_length=1)),
                ('subject_content', enumfields.fields.EnumField(enum=postcot_core.base_types.AccessControlContent, max_length=1)),
                ('reverses_hostname', models.BooleanField()),
                ('postfix_identifier', models.CharField(max_length=256, validators=[postcot_core.validators.postfix_identifier_validator.PostfixIdentifierValidator()])),
                ('pattern', models.CharField(max_length=256)),
                ('notes', models.CharField(blank=True, help_text='Notes on the account.', max_length=256, null=True)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_controls', to='postcot_core.AccessAction')),
            ],
            options={
                'verbose_name': 'Access Control',
                'verbose_name_plural': 'Access Controls',
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, max_length=1, verbose_name='Active')),
                ('local_part', models.CharField(max_length=256, validators=[postcot_core.validators.username_pattern_validator.UsernamePatternValidator()], verbose_name='Name')),
                ('notes', models.CharField(blank=True, help_text='Notes on the account.', max_length=256, null=True)),
                ('password_schema', models.CharField(choices=[('Plain', (postcot_core.base_types.PasswordSchema('PLAIN'),)), ('CRYPT Schemas', (postcot_core.base_types.PasswordSchema('CRYPT'), postcot_core.base_types.PasswordSchema('DES-CRYPT'), postcot_core.base_types.PasswordSchema('MD5-CRYPT'), postcot_core.base_types.PasswordSchema('SHA256-CRYPT'), postcot_core.base_types.PasswordSchema('SHA512-CRYPT'), postcot_core.base_types.PasswordSchema('BLF-CRYPT'))), ('MD5 Based Schemas', (postcot_core.base_types.PasswordSchema('PLAIN-MD5'), postcot_core.base_types.PasswordSchema('LDAP-MD5'), postcot_core.base_types.PasswordSchema('SMD5'))), ('SHA Based Schemas', (postcot_core.base_types.PasswordSchema('SHA'), postcot_core.base_types.PasswordSchema('SHA256'), postcot_core.base_types.PasswordSchema('SHA512'), postcot_core.base_types.PasswordSchema('SSHA'), postcot_core.base_types.PasswordSchema('SSHA256'), postcot_core.base_types.PasswordSchema('SSHA512'))), ('Other', (postcot_core.base_types.PasswordSchema('PBKDF2'),))], default='BLF-CRYPT', help_text="<p>\n    Schema for encrypting the stored password. The password would never be \n    stored with what it is when you input it unless you choose the \n    <b>PLAIN</b> schema. This is a way to protect your password from\n    stealing by hacking into your server and pulling your database off.\n</p>\n<ul>\n    <li>\n        <b>PLAIN</b> is discouraged. If you want to set the stored \n        password directly, check <b>Sets Encrypted Password Directly</b>\n    </li>\n    <li>\n        <b>CRYPT</b> schemas are generated with libc's crypt() function.\n    </li>\n</ul>\n", max_length=256, verbose_name='Password Schema')),
                ('hashed_password', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias_name', models.CharField(max_length=256, validators=[postcot_core.validators.username_pattern_validator.UsernamePatternValidator()], verbose_name='Name')),
                ('notes', models.CharField(blank=True, help_text='Notes on the alias.', max_length=256, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aliases', to='postcot_core.Account')),
            ],
            options={
                'verbose_name': 'Alias',
                'verbose_name_plural': 'Aliases',
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_name', models.CharField(max_length=256, validators=[postcot_core.validators.domain_validator.DomainValidator()], verbose_name='Name')),
                ('notes', models.CharField(blank=True, help_text='Notes on the domain.', max_length=256, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='account',
            name='domain',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='postcot_core.Domain'),
        ),
    ]
